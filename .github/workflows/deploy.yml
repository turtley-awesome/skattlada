# Build and deploy a new Docker image on each new tag

name: Deploy

on:
  workflow_dispatch: {}
  push:
    tags:
      - "*"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: "docker/login-action@v3"
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get Docker org
        id: get_docker_org
        uses: actions/github-script@v7
        with:
          script: |
            const package = require("./package.json");
            return package.config.docker_org;
          result-encoding: string

      - name: Get Docker repo
        id: get_docker_repo
        uses: actions/github-script@v7
        with:
          script: |
            const package = require("./package.json");
            return package.name;
          result-encoding: string

      - name: Get Docker image tag
        id: get_image_tag
        uses: actions/github-script@v7
        with:
          script: |
            const package = require("./package.json");
            return package.version;
          result-encoding: string

      - name: Build and push Docker image
        uses: "docker/build-push-action@v5"
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.get_docker_org.outputs.result }}/${{ steps.get_docker_repo.outputs.result }}:${{ steps.get_image_tag.outputs.result }}

      - name: Build Portainer environment variables
        id: build_portainer_env_vars
        uses: actions/github-script@v7
        with:
          script: |
            const vars = {
              APP_VERSION: "${{ steps.get_image_tag.outputs.result }}",
              HOST_PORT: "${{ vars.HOST_PORT_PROD }}",
              LOG_LEVEL: "${{ vars.LOG_LEVEL_PROD }}",
              RP_ID: "${{ vars.RP_ID_PROD }}",
              RP_NAME: "${{ vars.RP_NAME_PROD }}",
              BASE_URL: "${{ vars.BASE_URL_PROD }}",
              COOKIE_SECRET: "${{ secrets.COOKIE_SECRET_PROD }}",
              CSRF_SECRET: "${{ secrets.CSRF_SECRET_PROD }}",
              MAX_INVITE_LIFETIME: "${{ vars.MAX_INVITE_LIFETIME_PROD }}",
              DATA_PROVIDER_NAME: "${{ vars.DATA_PROVIDER_NAME_PROD }}",
              FILE_PROVIDER_NAME: "${{ vars.FILE_PROVIDER_NAME_PROD }}",
              GOOGLE_SPREADSHEET_ID: "${{ vars.GOOGLE_SPREADSHEET_ID_PROD }}",
              GOOGLE_AUTH_CLIENT_EMAIL: "${{ vars.GOOGLE_AUTH_CLIENT_EMAIL_PROD }}",
              GOOGLE_AUTH_PRIVATE_KEY_BASE64: "${{ secrets.GOOGLE_AUTH_PRIVATE_KEY_BASE64_PROD }}",
              METADATA_PROVIDER_NAME: "${{ vars.METADATA_PROVIDER_NAME }}"
            }
            const varsArray = Object.keys(vars).map((k) => ({ name: k, value: vars[k]}));
            return JSON.stringify(varsArray);
          result-encoding: string

      - name: Deploy Docker image to Portainer
        uses: datntdev0/action-deploy-to-portainer@v0.1.1
        with:
          portainerHost: ${{ vars.PORTAINER_HOST }}
          portainerApiKey: ${{ secrets.PORTAINER_API_KEY }}
          portainerEnvId: ${{ vars.PORTAINER_ENV_ID }}
          portainerStackName: ${{ vars.PORTAINER_STACK_NAME_PROD }}
          portainerFilePath: "./docker-compose.yml"
          portainerEnvVars: "${{ steps.build_portainer_env_vars.outputs.result }}"
